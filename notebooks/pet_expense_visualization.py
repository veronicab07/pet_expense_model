# -*- coding: utf-8 -*-
"""pet_expense_visualization.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/147IPGFdIx-EWo9zXXfIbXH8_fQn_HKXp
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('final_merged_data.csv')

# check content of some columns
columns_to_check = ['longevity', 'intelligence_category', 'adapts_well_to_apartment_living', 'Breed', 'grooming_required', 'category']

for col in columns_to_check:
    unique_values = df[col].unique()
    print(f"Unique values for {col}: {unique_values}")

columns_to_check = ['lifetime_cost', 'food_cost_year', 'food_per_week_$']

for col in columns_to_check:
    unique_values = df[col].unique()
    print(f"Unique values for {col}: {unique_values}")

columns_to_check = ['genetic_ailments', 'sensitivity_level', 'where_bitten']

for col in columns_to_check:
    unique_values = df[col].unique()
    print(f"Unique values for {col}: {unique_values}")

columns_to_check = ['intake_reason', 'returned_reason', 'deceased_reason']

for col in columns_to_check:
    unique_values = df[col].unique()
    print(f"Unique values for {col}: {unique_values}")

"""# Sub-sample (retainig individuals from every breed >= 200)"""

# some breeds are represented by just one individual. We'll limit the min number to 200
breed_counts = df['Breed'].value_counts()
breeds_to_keep = breed_counts[breed_counts >= 200].index

#filter df to keep only breeds with more than 200 individuals
df_filtered = df[df['Breed'].isin(breeds_to_keep)]

# create subsample df
sample_size_per_breed = 200
subsample = df_filtered.groupby('Breed').apply(lambda x: x.sample(n=min(len(x), sample_size_per_breed), random_state=1)).reset_index(drop=True)

# create subsample_size df to group by breed and size category
subsample_size = df.groupby(['size_category', 'Breed']).apply(lambda x: x.sample(n=min(len(x), sample_size_per_breed), random_state=1)).reset_index(drop=True)

# convert longevity to numeric
subsample_size['longevity'] = pd.to_numeric(subsample['longevity'], errors='coerce')

# plot longevity vs size category
plt.figure(figsize=(8, 4))
sns.boxplot(x='size_category', y='longevity', data=subsample_size)
plt.title('Longevity by size')
plt.xlabel('size')
plt.ylabel('Longevity (years)')
plt.xticks(rotation=45)
plt.show()

# number of different breeds in subsample
num_breeds = subsample['Breed'].nunique()
print("Number of different breeds in the subsample:", num_breeds)

#group df by size category and easiness to groom
grouped_df = df.groupby('size_category')['easy_to_groom'].mean().reset_index()

# barplot size category vs easiness to groom
plt.figure(figsize=(8, 6))
sns.barplot(x='size_category', y='easy_to_groom', data=grouped_df)
plt.title('Easiness to Groom (avg) by Size Category')
plt.xlabel('Size Category')
plt.ylabel('Easy to Groom (avg)')
plt.show()

# top 20 most common breeds in df due to display constraints (153 different breeds in dataset)
top_n = 20
most_common_breeds = df['Breed'].value_counts().head(top_n).index.tolist()

#subsample with most common breed
subsample_most_common = df[df['Breed'].isin(most_common_breeds)]
breed_counts = subsample_most_common['Breed'].value_counts()

#calculate proportion of every breed
total_count = breed_counts.sum()
breed_proportions = breed_counts / total_count
breed_proportions_df = breed_proportions.reset_index()
breed_proportions_df.columns = ['Breed', 'Proportion']
breed_proportions_df

#barplot breed (top 20) proportion in subsample df
plt.figure(figsize=(14, 10))

# Use seaborn's barplot function to create the plot
sns.barplot(x='Proportion', y='Breed', data=breed_proportions_df, palette='viridis')

# Add titles and labels
plt.xlabel('Proportion')
plt.ylabel('Breed')
plt.title('Proportion of Most Common Dog Breeds')

# Show the plot
plt.show()

# Merge breed proportions with subsample_most_common
combined_df = pd.merge(breed_proportions_df, subsample_most_common, on='Breed')
# Group by most common breed and calculate the mean of easy_to_groom
grouped_df = combined_df.groupby('Breed')['easy_to_groom'].mean().reset_index()
# Sort by 'easy_to_groom'
grouped_df_sorted = grouped_df.sort_values(by='easy_to_groom', ascending=False)

# bar chart easy to groom vs most common breeds (proportion)
plt.figure(figsize=(8, 6))
sns.barplot(x='Breed', y='easy_to_groom', data=grouped_df_sorted)
plt.title('Easiness to Groom (avg) by Breed')
plt.xlabel('Breed')
plt.ylabel('Easy to Groom (avg)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

#group df by size category and easiness to groom
grouped_df = df.groupby('size_category')['easy_to_groom'].mean().reset_index()

# barplot size category vs easiness to groom
plt.figure(figsize=(8, 6))
sns.barplot(x='size_category', y='easy_to_groom', data=grouped_df)
plt.title('Easiness to Groom (avg) by Size Category')
plt.xlabel('Size Category')
plt.ylabel('Easy to Groom (avg)')
plt.show()

# Merge breed proportions with subsample_most_common
combined_df = pd.merge(breed_proportions_df, subsample_most_common, on='Breed')
# Group by most common breed and calculate the mean of potential_for_mouthiness
grouped_df = combined_df.groupby('Breed')['potential_for_mouthiness'].mean().reset_index()
# Sort by 'potential_for_mouthiness'
grouped_df_sorted = grouped_df.sort_values(by='potential_for_mouthiness', ascending=False)

# bar chart easy to groom vs most common breeds (proportion)
plt.figure(figsize=(8, 6))
sns.barplot(x='Breed', y='potential_for_mouthiness', data=grouped_df_sorted)
plt.title('potential for mouthiness (avg) by Breed')
plt.xlabel('Breed')
plt.ylabel('potential for mouthiness (avg)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

grouped_df = df.groupby('size_category')['tendency_to_bark_or_howl'].mean().reset_index()

plt.figure(figsize=(8, 6))
sns.barplot(x='size_category', y='tendency_to_bark_or_howl', data=grouped_df)
plt.title('tendency to bark or howl (avg) by Size Category')
plt.xlabel('Size Category')
plt.ylabel('tendency_to_bark_or_howl (avg)')
plt.show()

# Merge breed proportions with subsample_most_common
combined_df = pd.merge(breed_proportions_df, subsample_most_common, on='Breed')
# Group by most common breed and calculate the mean of tendency_to_bark_or_howl
grouped_df = combined_df.groupby('Breed')['tendency_to_bark_or_howl'].mean().reset_index()
# Sort by 'tendency_to_bark_or_howl'
grouped_df_sorted = grouped_df.sort_values(by='tendency_to_bark_or_howl', ascending=False)

# bar chart tendency to bark or howl vs most common breeds (proportion)
plt.figure(figsize=(8, 6))
sns.barplot(x='Breed', y='tendency_to_bark_or_howl', data=grouped_df_sorted)
plt.title('tendency to bark or howl (avg) by Breed')
plt.xlabel('Breed')
plt.ylabel('tendency to bark or howl (avg)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

subsample_most_common['longevity'] = pd.to_numeric(subsample_most_common['longevity'], errors = 'coerce')

# Merge breed proportions with subsample_most_common
combined_df = pd.merge(breed_proportions_df, subsample_most_common, on='Breed')
# Group by most common breed and calculate the mean of longevity
grouped_df = combined_df.groupby('Breed')['longevity'].mean().reset_index()
# Sort by 'longevity'
grouped_df_sorted = grouped_df.sort_values(by='longevity', ascending=False)

# bar chart longevity vs most common breeds (proportion)
plt.figure(figsize=(8, 6))
sns.barplot(x='Breed', y='longevity', data=grouped_df_sorted)
plt.title('longevity (avg) by Breed')
plt.xlabel('Breed')
plt.ylabel('longevity (avg)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# remove $ and convert to numeric
subsample_most_common['food_cost_year'] = pd.to_numeric(subsample_most_common['food_cost_year'].str.replace('$', ''), errors='coerce')

# Merge breed proportions with subsample_most_common
combined_df = pd.merge(breed_proportions_df, subsample_most_common, on='Breed')
# Group by most common breed and calculate the mean of food_cost_year
grouped_df = combined_df.groupby('Breed')['food_cost_year'].mean().reset_index()
# Sort by 'food_cost_year'
grouped_df_sorted = grouped_df.sort_values(by='food_cost_year', ascending=False)

# bar chart food cost year vs most common breeds (proportion)
plt.figure(figsize=(8, 6))
sns.barplot(x='Breed', y='food_cost_year', data=grouped_df_sorted)
plt.title('food cost year (avg) by Breed')
plt.xlabel('Breed')
plt.ylabel('food cost year (avg)')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()


